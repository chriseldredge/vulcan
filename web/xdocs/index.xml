<document>
  <properties>
    <title>Vulcan Build Manager</title>
  </properties>
  <body>
    <section name="Overview">
		<p>Vulcan is a tool that developers can use to perform automated builds
			of their projects.  Screen shot:</p>
		<a href="images/cap1.png" target="_blank"><img src="images/cap1.png" alt="screen shot" border="0" width="50%" height="50%"/></a>
    </section>
	<section name="Continuous Integration">
		<p>If you are not familiar with Continuous Integration, an
			<a href="http://www.martinfowler.com/articles/continuousIntegration.html">article</a>
			written by Martin Fowler provides a great introduction.
		</p>
		<p>Vulcan provides The Master Build aspect described in the above
			mentioned article.  Vulcan monitors your project source repository
			for changes, and will check out a fresh copy of the project and
			build it (using an automated build tool).  When the build is
			completed, various listeners provide the results over different
			mediums, such as web, e-mail and rss.
		</p>
	</section>
	<section name="Features">
		<ul>
			<li>Extensible framework built on industry standards and open source components.</li>
			<li>Modular, plugin based architecture.</li>
			<li>Supports definitions of many projects with dependencies.</li>
			<li>Automatically detects proper build order based on project dependencies.</li>
			<li>Fully internationalized to make localization easy (currently only English is provided).</li>
			<li>Build outcomes published via RSS, XML, and an optional e-mail plugin.</li>
		</ul>
	</section>
	<section name="Requirements">
		<p>Vulcan is a J2EE Web Application which means it needs a Web Container
			to run in.  But not just any Web Container will do.  Since Vulcan
			began development in mid-2005, the developer chose to use the
			latest standards available.  These include features added to Java
			in version 5.0 and J2EE version 1.4.  At minimum, you will need the
			following:
		</p>
		<ul>
			<li>Java Runtime Environment, version 5</li>
			<li>J2EE 1.4 compliant Web Container; one of
				<ul>
					<li>Apache Tomcat 5.5</li>
					<li>BEA WebLogic 9</li>
				</ul>
			</li>
		</ul>
		
		<p>In addition to the requirements for running Vulcan (see above), Vulcan also requires
			your project(s) to reside in a Software Configuration Management (SCM) repository.
			Examples include Subversion, and CVS.  Other SCM vendors will be supported in the future.
		</p>
	</section>
	<section name="Automated Builds and Build Results">
		<p>Vulcan wont be able to do much with your project unless you have
			an automated build process, using a tool such as Apache Ant, Apache Maven, GNU Make, etc.
			Ideally, your build process starts with a clean slate, compiles your source files, then
			runs a suite of unit-tests against the code to ensure that the build is good.
		</p>
		
		<p>Vulcan will invoke your build tool, then decide whether the build is successfull or not
			based on the outcome from the build tool.  So any type of validation check you can think
			of (as long as you can automate it) can influence the success/failure outcome.</p>
			
		<p>A project build can result in any of the following outcomes:</p>
		<ul>
			<li>PASS (success)</li>
			<li>FAIL (automated build tool failed)</li>
			<li>SKIP (project was not built because a dependency is not in PASS state)</li>
			<li>ERROR (project is not configured correctly, or some error occurred)</li>
		</ul>
		
		<p>Vulcan distinguishes between various types of failures to provide more information
			to the user.  A FAIL status means that the build process executed fine, but
			the build tool decided that the build is a failure (for any reason).  This could
			be because the source code has syntax errors, one or more unit-tests failed, etc.</p>
			
		<p>An ERROR status will usually mean either the project is not configured properly,
			some transient error occurred (e.g. could not connect to repository), the build
			was terminated by a user or timeout, or an internal error (a bug in Vulcan?) occurred.</p>
			
		<p>A SKIP status means that the project was not built because a dependency that the project
			requires (another project) either has not been built, did not have a PASS outcome, or
			a dependency cycle exists between projects.</p>
			
		<p>PASS simply means that none of the above errors happened.</p>
	</section>
	<section name="Document Version">
		<p>$Id$</p>
	</section>
  </body>
</document>
