<document>
  <properties>
	<title>Vulcan - Security Configuration</title>
  </properties>
  <body>
	<section name="Security Configuration">
		<p>
			Vulcan uses standard J2EE declaritive security.  It is recommended that you enable security,
			not necessarily for the normal reasons, but because it allows Vulcan to keep an audit trail of
			who is doing what.  For example, when users access the Manual Build feature, you may want to
			keep track of who is performing these functions.  Also, depending on who will have access to
			your system, it is probably a good idea to limit who has access to the Setup section of Vulcan.
		</p>
		<p>
			J2EE security configuration in general is outside the scope of this documentation.
			If you are using Tomcat, you can read about how to configure security in their documentation:
			<a href="http://tomcat.apache.org/tomcat-5.5-doc/realm-howto.html">http://tomcat.apache.org/tomcat-5.5-doc/realm-howto.html</a>.
		</p>
		<p>
			<span class="note">Note: If users at your site are authenticated with a Windows Domain
				with Active Directory, it is possible to use the JNDIRealm in Tomcat to authenticate
				users against the ldap server running on your Domain Controller.  Again, the details
				are outside the scope of this document, but this note is provided to inform you that
				it is not necessary to create new acounts for all of your users just so they can
				access Vulcan.  For more information, check the Vulcan User Group.
			</span>
		</p>
		<p>
			Vulcan resources are organized in a way that should make it easy to divide access across
			different groups.  Using the &lt;security-constraint&gt; declaration in
			<span class="filename">WEB-INF/web.xml</span>, you can use
			the following url-patterns:
		</p>
		<table>
			<thead>
				<tr>
					<th>url-pattern</th>
					<th>description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>/admin/*</td>
					<td>Limit acces to the Setup section.  This will require a user to be
						authorized before changing Vulcan configuration.
					</td>
				</tr>
				<tr>
					<td>/buildmanagement/*</td>
					<td>Limit access to the Manual Build capability.  This will require a
					user to be authorized before forcing a build,  building from an
					alternate tag, or aborting a build in progress.
					</td>
				</tr>
				<tr>
					<td>/site/*</td>
					<td>Limit access to working copies.  If your working copy contains sensitive
					information, you can limit access so only authorized users can browse the
					working copy through Vulcan.
					</td>
				</tr>
				<tr>
					<td>/*</td>
					<td>Limit access to all parts of Vulcan.  This will require a user to log in
					before seeing the dashboard, build details and build history.  This level of
					security is not necessary in most situations.
					</td>
				</tr>
    		</tbody>
		</table>
		<p>
			After choosing which section you want to secure, you need to choose a security-role which
			a user must be granted before accessing that section.  The role name is specific to your
			authentication realm.  If you are using Active Directory, you may already have Groups in
			the directory that can be used for this purpose.  For example, you may have a Developers
			group which you can use to limit access to /buildmanagement/*, and you may have a System Administrators 
			or Configuration Management group which you can use to limit access to /admin/*.
		</p>
		<p>
			When you choose your role names, add them to your &lt;security-constraint&gt; sections,
			then also add a &lt;security-role&gt; section for each role.
		</p>
		<p>
			<span class="filename">web.xml</span> has example security configurations
			which you can use as a template.
		</p>
	</section>
  </body>
</document>
